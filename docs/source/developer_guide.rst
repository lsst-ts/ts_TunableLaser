
Developer Guide
===============

The following guide is for a developer who wants to work on this project.


Installation
------------
This assumes that the following requirements are met.

* Centos 7 installed
* python-3.6 installed
* ts_sal installed
* git repositories are in ~/gitrepo

.. code-block:: bash

    pip install -r requirements-dev.txt -e .
    export PYTHONPATH=$PYTHONPATH:~/gitrepo/ts_salobj/python
    source ~/gitrepo/ts_sal/setup.env


Design Decisions
----------------
Code is written in python 3.6 using pytest as the unit test framework. Code follows PEP-8 as much as it is able to and
uses numpydoc as its docstring format. It uses documentation written in rst which is generated by Sphinx. The laser uses
CANBUS technology to send messages from its internal components to the main laser board. These messages are then
translated into RS232 protocol which has the ascii protocol by a converter module located in the power block for the
laser for allowing text commands to be received and responded to by the laser. I chose to use SimpleNamespaces to
correspond to the modules and their registers in order to develop a pythonic api that would allow the developer to
simply type laser.M_CPU800.set_propagate("ON") instead of dividing each module into distinct classes. As a result each
method call is made using a private function. Since each command has a similar structure, helper functions were made to
establish the set flow of read & write call. These functions include checking the reply for errors and removing return
carriages and new lines. The CSC is written using salobj which uses asyncio as part of its implementation allowing for
asynchronous commands. Commands are formalized by creating the xml which is generated into a SALPY library through
salgenerator. This library is what is used to power this CSC. Reading the salobj documentation is very useful for CSC
development.

